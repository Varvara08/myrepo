/* Generated by Cython 0.19.2 on Tue Jun 21 16:39:16 2016 */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02040000
    #error Cython requires Python 2.4+.
#else
#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define CYTHON_FORMAT_SSIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_AsInt(o)
  #define PyNumber_Index(o)    ((PyNumber_Check(o) && !PyFloat_Check(o)) ? PyNumber_Int(o) : \
                                (PyErr_Format(PyExc_TypeError, \
                                              "expected index value, got %.200s", Py_TYPE(o)->tp_name), \
                                 (PyObject*)0))
  #define __Pyx_PyIndex_Check(o) (PyNumber_Check(o) && !PyFloat_Check(o) && \
                                  !PyComplex_Check(o))
  #define PyIndex_Check __Pyx_PyIndex_Check
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
  #define __PYX_BUILD_PY_SSIZE_T "i"
#else
  #define __PYX_BUILD_PY_SSIZE_T "n"
  #define CYTHON_FORMAT_SSIZE_T "z"
  #define __Pyx_PyIndex_Check PyIndex_Check
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)
  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;
  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
  #define PyBUF_RECORDS (PyBUF_STRIDES | PyBUF_FORMAT | PyBUF_WRITABLE)
  #define PyBUF_FULL (PyBUF_INDIRECT | PyBUF_FORMAT | PyBUF_WRITABLE)
  typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);
  typedef void (*releasebufferproc)(PyObject *, Py_buffer *);
#endif
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#if PY_MAJOR_VERSION < 3 && PY_MINOR_VERSION < 6
  #define PyUnicode_FromString(s) PyUnicode_Decode(s, strlen(s), "UTF-8", "strict")
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_TPFLAGS_HAVE_VERSION_TAG 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((k=k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj) || \
                                         PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (Py_TYPE(obj) == &PyBaseString_Type)
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_VERSION_HEX < 0x03020000
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__espressomd__global_variables
#define __PYX_HAVE_API__espressomd__global_variables
#include "global.hpp"
#include "communication.hpp"
#include "integrate.hpp"
#include "verlet.hpp"
#include "lattice.hpp"
#include "domain_decomposition.hpp"
#include "particle_data.hpp"
#include "interaction_data.hpp"
#include "thermostat.hpp"
#include "dpd.hpp"
#include "cells.hpp"
#include "layered.hpp"
#include "rattle.hpp"
#include "tuning.hpp"
#include "imd.hpp"
#include "grid.hpp"
#include "npt.hpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromUString(s)  __Pyx_PyObject_FromString((char*)s)
#define __Pyx_PyBytes_FromUString(s)   __Pyx_PyBytes_FromString((char*)s)
#define __Pyx_PyStr_FromUString(s)     __Pyx_PyStr_FromString((char*)s)
#define __Pyx_PyUnicode_FromUString(s) __Pyx_PyUnicode_FromString((char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return u_end - u - 1;
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params() {
    PyObject* sys = NULL;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    sys = PyImport_ImportModule("sys");
    if (sys == NULL) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    if (default_encoding == NULL) goto bad;
    if (strcmp(PyBytes_AsString(default_encoding), "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        const char* default_encoding_c = PyBytes_AS_STRING(default_encoding);
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (ascii_chars_u == NULL) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (ascii_chars_b == NULL || strncmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
    }
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return 0;
bad:
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params() {
    PyObject* sys = NULL;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (sys == NULL) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    if (default_encoding == NULL) goto bad;
    default_encoding_c = PyBytes_AS_STRING(default_encoding);
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(sys);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "global_variables.pyx",
};

/*--- Type declarations ---*/
struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle;

/* "espressomd/global_variables.pyx":24
 * import numpy as np
 * 
 * cdef class GlobalsHandle:             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         pass
 */
struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle {
  PyObject_HEAD
};

#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed); /*proto*/

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause); /*proto*/

#define __Pyx_GetItemInt(o, i, size, to_py_func, is_list, wraparound, boundscheck) \
    (((size) <= sizeof(Py_ssize_t)) ? \
    __Pyx_GetItemInt_Fast(o, i, is_list, wraparound, boundscheck) : \
    __Pyx_GetItemInt_Generic(o, to_py_func(i)))
#define __Pyx_GetItemInt_List(o, i, size, to_py_func, is_list, wraparound, boundscheck) \
    (((size) <= sizeof(Py_ssize_t)) ? \
    __Pyx_GetItemInt_List_Fast(o, i, wraparound, boundscheck) : \
    __Pyx_GetItemInt_Generic(o, to_py_func(i)))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, size, to_py_func, is_list, wraparound, boundscheck) \
    (((size) <= sizeof(Py_ssize_t)) ? \
    __Pyx_GetItemInt_Tuple_Fast(o, i, wraparound, boundscheck) : \
    __Pyx_GetItemInt_Generic(o, to_py_func(i)))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name); /*proto*/

#define __Pyx_SetItemInt(o, i, v, size, to_py_func, is_list, wraparound, boundscheck) \
    (((size) <= sizeof(Py_ssize_t)) ? \
    __Pyx_SetItemInt_Fast(o, i, v, is_list, wraparound, boundscheck) : \
    __Pyx_SetItemInt_Generic(o, to_py_func(i), v))
static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

static CYTHON_INLINE long __Pyx_mod_long(long, long); /* proto */

static CYTHON_INLINE long __Pyx_div_long(long, long); /* proto */

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level); /*proto*/

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static int __Pyx_check_binary_version(void);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/


/* Module declarations from 'espressomd.global_variables' */
static PyTypeObject *__pyx_ptype_10espressomd_16global_variables_GlobalsHandle = 0;
#define __Pyx_MODULE_NAME "espressomd.global_variables"
int __pyx_module_is_main_espressomd__global_variables = 0;

/* Implementation of 'espressomd.global_variables' */
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_range;
static int __pyx_pf_10espressomd_16global_variables_13GlobalsHandle___init__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static int __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_5box_l___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self, PyObject *__pyx_v__box_l); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_5box_l_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_9cell_grid___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_9cell_size___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_9dpd_gamma___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_9dpd_r_cut___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_5gamma___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_12integ_switch___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_11local_box_l___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_7max_cut___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static int __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_13max_num_cells___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self, int __pyx_v__max_num_cells); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_13max_num_cells_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static int __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_13min_num_cells___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self, int __pyx_v__min_num_cells); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_13min_num_cells_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_8max_part___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_9max_range___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_8max_skin___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_8n_layers___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_7n_nodes___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_6n_part___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_12n_part_types___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_12n_rigidbonds___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static int __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_9node_grid___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self, PyObject *__pyx_v__node_grid); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_9node_grid_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_13nptiso_gamma0___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_13nptiso_gammav___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_9npt_p_ext___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_10npt_p_inst___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_13npt_p_inst_av___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static int __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_10npt_piston___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self, PyObject *__pyx_v__npt_piston); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_10npt_piston_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static int __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_10npt_p_diff___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self, PyObject *__pyx_v__npt_p_diff); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_10npt_p_diff_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static int __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_11periodicity___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self, PyObject *__pyx_v__periodic); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_11periodicity_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static int __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_4skin___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self, double __pyx_v__skin); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_4skin_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_11temperature___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_13thermo_switch___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static int __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_4time___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self, double __pyx_v__time); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_4time_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static int __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_9time_step___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self, double __pyx_v__time_step); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_9time_step_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static int __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_7timings___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self, int __pyx_v__timings); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_7timings_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_13transfer_rate___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_17max_cut_nonbonded___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_12verlet_reuse___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_14lattice_switch___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_10dpd_tgamma___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_10dpd_tr_cut___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_7dpd_twf___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_6dpd_wf___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_11adress_vars___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_14max_cut_bonded___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self); /* proto */
static PyObject *__pyx_tp_new_10espressomd_16global_variables_GlobalsHandle(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static char __pyx_k_1[] = "Box length must be of length 3";
static char __pyx_k_3[] = "Box length must be > 0 in all directions";
static char __pyx_k_5[] = "max_num_cells must be >= min_num_cells (currently ";
static char __pyx_k_6[] = ")";
static char __pyx_k_7[] = "min_num_cells must be >= processor_min_num_cells (currently ";
static char __pyx_k_8[] = "min_num_cells must be <= max_num_cells (currently ";
static char __pyx_k_9[] = "node_grid must be of length 3";
static char __pyx_k_11[] = "node_grid must be > 0 in all directions";
static char __pyx_k_13[] = "node_grid does not fit n_nodes (";
static char __pyx_k_14[] = "npt_piston must be > 0";
static char __pyx_k_16[] = "periodicity must be of length 3, got length ";
static char __pyx_k_18[] = "Until we can handle conditional compilation, only periodicity [1,1,1] is supported in python interface";
static char __pyx_k_21[] = "Skin must be >= 0";
static char __pyx_k_23[] = "Simulation time must be >= 0";
static char __pyx_k_25[] = "Time Step must be positive";
static char __pyx_k__np[] = "np";
static char __pyx_k__array[] = "array";
static char __pyx_k__numpy[] = "numpy";
static char __pyx_k__range[] = "range";
static char __pyx_k__zeros[] = "zeros";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__ValueError[] = "ValueError";
static char __pyx_k____import__[] = "__import__";
static char __pyx_k__adress_vars[] = "adress_vars";
static PyObject *__pyx_kp_s_1;
static PyObject *__pyx_kp_s_11;
static PyObject *__pyx_kp_s_13;
static PyObject *__pyx_kp_s_14;
static PyObject *__pyx_kp_s_16;
static PyObject *__pyx_kp_s_18;
static PyObject *__pyx_kp_s_21;
static PyObject *__pyx_kp_s_23;
static PyObject *__pyx_kp_s_25;
static PyObject *__pyx_kp_s_3;
static PyObject *__pyx_kp_s_5;
static PyObject *__pyx_kp_s_6;
static PyObject *__pyx_kp_s_7;
static PyObject *__pyx_kp_s_8;
static PyObject *__pyx_kp_s_9;
static PyObject *__pyx_n_s__ValueError;
static PyObject *__pyx_n_s____import__;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s__adress_vars;
static PyObject *__pyx_n_s__array;
static PyObject *__pyx_n_s__np;
static PyObject *__pyx_n_s__numpy;
static PyObject *__pyx_n_s__range;
static PyObject *__pyx_n_s__zeros;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_k_tuple_2;
static PyObject *__pyx_k_tuple_4;
static PyObject *__pyx_k_tuple_10;
static PyObject *__pyx_k_tuple_12;
static PyObject *__pyx_k_tuple_15;
static PyObject *__pyx_k_tuple_17;
static PyObject *__pyx_k_tuple_19;
static PyObject *__pyx_k_tuple_20;
static PyObject *__pyx_k_tuple_22;
static PyObject *__pyx_k_tuple_24;
static PyObject *__pyx_k_tuple_26;

/* Python wrapper */
static int __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle___init__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":25
 * 
 * cdef class GlobalsHandle:
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static int __pyx_pf_10espressomd_16global_variables_13GlobalsHandle___init__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_5box_l_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v__box_l); /*proto*/
static int __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_5box_l_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v__box_l) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_5box_l___set__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self), ((PyObject *)__pyx_v__box_l));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":29
 * 
 *     property box_l:
 *         def __set__(self, _box_l):             # <<<<<<<<<<<<<<
 *             global box_l
 *             if len(_box_l) != 3:
 */

static int __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_5box_l___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self, PyObject *__pyx_v__box_l) {
  long __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  long __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "espressomd/global_variables.pyx":31
 *         def __set__(self, _box_l):
 *             global box_l
 *             if len(_box_l) != 3:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Box length must be of length 3")
 *             for i in range(3):
 */
  __pyx_t_1 = PyObject_Length(__pyx_v__box_l); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_t_1 != 3) != 0);
  if (__pyx_t_2) {

    /* "espressomd/global_variables.pyx":32
 *             global box_l
 *             if len(_box_l) != 3:
 *                 raise ValueError("Box length must be of length 3")             # <<<<<<<<<<<<<<
 *             for i in range(3):
 *                 if _box_l[i] <= 0:
 */
    __pyx_t_3 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "espressomd/global_variables.pyx":33
 *             if len(_box_l) != 3:
 *                 raise ValueError("Box length must be of length 3")
 *             for i in range(3):             # <<<<<<<<<<<<<<
 *                 if _box_l[i] <= 0:
 *                     raise ValueError("Box length must be > 0 in all directions")
 */
  for (__pyx_t_4 = 0; __pyx_t_4 < 3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "espressomd/global_variables.pyx":34
 *                 raise ValueError("Box length must be of length 3")
 *             for i in range(3):
 *                 if _box_l[i] <= 0:             # <<<<<<<<<<<<<<
 *                     raise ValueError("Box length must be > 0 in all directions")
 *                 box_l[i]=_box_l[i]
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v__box_l, __pyx_v_i, sizeof(long), PyInt_FromLong, 0, 1, 1); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_int_0, Py_LE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "espressomd/global_variables.pyx":35
 *             for i in range(3):
 *                 if _box_l[i] <= 0:
 *                     raise ValueError("Box length must be > 0 in all directions")             # <<<<<<<<<<<<<<
 *                 box_l[i]=_box_l[i]
 * 
 */
      __pyx_t_5 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_4), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L6;
    }
    __pyx_L6:;

    /* "espressomd/global_variables.pyx":36
 *                 if _box_l[i] <= 0:
 *                     raise ValueError("Box length must be > 0 in all directions")
 *                 box_l[i]=_box_l[i]             # <<<<<<<<<<<<<<
 * 
 *             mpi_bcast_parameter(0)
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v__box_l, __pyx_v_i, sizeof(long), PyInt_FromLong, 0, 1, 1); if (!__pyx_t_5) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    (box_l[__pyx_v_i]) = __pyx_t_6;
  }

  /* "espressomd/global_variables.pyx":38
 *                 box_l[i]=_box_l[i]
 * 
 *             mpi_bcast_parameter(0)             # <<<<<<<<<<<<<<
 * 
 *         def __get__(self):
 */
  mpi_bcast_parameter(0);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.box_l.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_5box_l_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_5box_l_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_5box_l_2__get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":40
 *             mpi_bcast_parameter(0)
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return np.array([box_l[0], box_l[1], box_l[2]])
 * 
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_5box_l_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":41
 * 
 *         def __get__(self):
 *             return np.array([box_l[0], box_l[1], box_l[2]])             # <<<<<<<<<<<<<<
 * 
 *     property cell_grid:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s__np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s__array); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyFloat_FromDouble((box_l[0])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyFloat_FromDouble((box_l[1])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble((box_l[2])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_t_5));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_5));
  __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.box_l.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_9cell_grid_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_9cell_grid_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_9cell_grid___get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":44
 * 
 *     property cell_grid:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return np.array( [ dd.cell_grid[0], dd.cell_grid[1], dd.cell_grid[2]  ] )
 * 
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_9cell_grid___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":45
 *     property cell_grid:
 *         def __get__(self):
 *             return np.array( [ dd.cell_grid[0], dd.cell_grid[1], dd.cell_grid[2]  ] )             # <<<<<<<<<<<<<<
 * 
 *     property cell_size:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s__np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s__array); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromLong((dd.cell_grid[0])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyInt_FromLong((dd.cell_grid[1])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyInt_FromLong((dd.cell_grid[2])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_t_5));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_5));
  __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.cell_grid.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_9cell_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_9cell_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_9cell_size___get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":48
 * 
 *     property cell_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return np.array( [ dd.cell_size[0], dd.cell_size[1], dd.cell_size[2] ] )
 * 
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_9cell_size___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":49
 *     property cell_size:
 *         def __get__(self):
 *             return np.array( [ dd.cell_size[0], dd.cell_size[1], dd.cell_size[2] ] )             # <<<<<<<<<<<<<<
 * 
 *     property dpd_gamma:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s__np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s__array); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyFloat_FromDouble((dd.cell_size[0])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyFloat_FromDouble((dd.cell_size[1])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble((dd.cell_size[2])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_t_5));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_5));
  __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.cell_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_9dpd_gamma_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_9dpd_gamma_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_9dpd_gamma___get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":52
 * 
 *     property dpd_gamma:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return dpd_gamma;
 * 
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_9dpd_gamma___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":53
 *     property dpd_gamma:
 *         def __get__(self):
 *             return dpd_gamma;             # <<<<<<<<<<<<<<
 * 
 *     property dpd_r_cut:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(dpd_gamma); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.dpd_gamma.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_9dpd_r_cut_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_9dpd_r_cut_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_9dpd_r_cut___get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":56
 * 
 *     property dpd_r_cut:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return dpd_r_cut;
 * 
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_9dpd_r_cut___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":57
 *     property dpd_r_cut:
 *         def __get__(self):
 *             return dpd_r_cut;             # <<<<<<<<<<<<<<
 * 
 *     property gamma:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(dpd_r_cut); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.dpd_r_cut.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_5gamma_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_5gamma_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_5gamma___get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":60
 * 
 *     property gamma:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return langevin_gamma;
 * 
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_5gamma___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":61
 *     property gamma:
 *         def __get__(self):
 *             return langevin_gamma;             # <<<<<<<<<<<<<<
 * 
 *     property integ_switch:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(langevin_gamma); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.gamma.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_12integ_switch_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_12integ_switch_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_12integ_switch___get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":64
 * 
 *     property integ_switch:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return integ_switch;
 * 
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_12integ_switch___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":65
 *     property integ_switch:
 *         def __get__(self):
 *             return integ_switch;             # <<<<<<<<<<<<<<
 * 
 *     property local_box_l:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(integ_switch); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.integ_switch.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_11local_box_l_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_11local_box_l_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_11local_box_l___get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":68
 * 
 *     property local_box_l:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return np.array([local_box_l[0], local_box_l[1], local_box_l[2]])
 * 
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_11local_box_l___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":69
 *     property local_box_l:
 *         def __get__(self):
 *             return np.array([local_box_l[0], local_box_l[1], local_box_l[2]])             # <<<<<<<<<<<<<<
 * 
 *     property max_cut:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s__np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s__array); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyFloat_FromDouble((local_box_l[0])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyFloat_FromDouble((local_box_l[1])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble((local_box_l[2])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_t_5));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_5));
  __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.local_box_l.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_7max_cut_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_7max_cut_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_7max_cut___get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":72
 * 
 *     property max_cut:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return max_cut;
 * 
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_7max_cut___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":73
 *     property max_cut:
 *         def __get__(self):
 *             return max_cut;             # <<<<<<<<<<<<<<
 * 
 *     property max_num_cells:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(max_cut); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.max_cut.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_13max_num_cells_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg__max_num_cells); /*proto*/
static int __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_13max_num_cells_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg__max_num_cells) {
  int __pyx_v__max_num_cells;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg__max_num_cells); {
    __pyx_v__max_num_cells = __Pyx_PyInt_AsInt(__pyx_arg__max_num_cells); if (unlikely((__pyx_v__max_num_cells == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.max_num_cells.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_13max_num_cells___set__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self), ((int)__pyx_v__max_num_cells));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":76
 * 
 *     property max_num_cells:
 *         def __set__(self, int _max_num_cells):             # <<<<<<<<<<<<<<
 *             global max_num_cells
 *             if _max_num_cells < min_num_cells:
 */

static int __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_13max_num_cells___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self, int __pyx_v__max_num_cells) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "espressomd/global_variables.pyx":78
 *         def __set__(self, int _max_num_cells):
 *             global max_num_cells
 *             if _max_num_cells < min_num_cells:             # <<<<<<<<<<<<<<
 *                 raise ValueError("max_num_cells must be >= min_num_cells (currently "+str(min_num_cells)+")")
 *             max_num_cells=_max_num_cells
 */
  __pyx_t_1 = ((__pyx_v__max_num_cells < min_num_cells) != 0);
  if (__pyx_t_1) {

    /* "espressomd/global_variables.pyx":79
 *             global max_num_cells
 *             if _max_num_cells < min_num_cells:
 *                 raise ValueError("max_num_cells must be >= min_num_cells (currently "+str(min_num_cells)+")")             # <<<<<<<<<<<<<<
 *             max_num_cells=_max_num_cells
 *             mpi_bcast_parameter(FIELD_MAXNUMCELLS);
 */
    __pyx_t_2 = PyInt_FromLong(min_num_cells); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(((PyObject *)__pyx_kp_s_5), __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_3, ((PyObject *)__pyx_kp_s_6)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "espressomd/global_variables.pyx":80
 *             if _max_num_cells < min_num_cells:
 *                 raise ValueError("max_num_cells must be >= min_num_cells (currently "+str(min_num_cells)+")")
 *             max_num_cells=_max_num_cells             # <<<<<<<<<<<<<<
 *             mpi_bcast_parameter(FIELD_MAXNUMCELLS);
 *         def __get__(self):
 */
  max_num_cells = __pyx_v__max_num_cells;

  /* "espressomd/global_variables.pyx":81
 *                 raise ValueError("max_num_cells must be >= min_num_cells (currently "+str(min_num_cells)+")")
 *             max_num_cells=_max_num_cells
 *             mpi_bcast_parameter(FIELD_MAXNUMCELLS);             # <<<<<<<<<<<<<<
 *         def __get__(self):
 *             return max_num_cells;
 */
  mpi_bcast_parameter(FIELD_MAXNUMCELLS);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.max_num_cells.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_13max_num_cells_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_13max_num_cells_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_13max_num_cells_2__get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":82
 *             max_num_cells=_max_num_cells
 *             mpi_bcast_parameter(FIELD_MAXNUMCELLS);
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return max_num_cells;
 * 
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_13max_num_cells_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":83
 *             mpi_bcast_parameter(FIELD_MAXNUMCELLS);
 *         def __get__(self):
 *             return max_num_cells;             # <<<<<<<<<<<<<<
 * 
 *     property min_num_cells:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(max_num_cells); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.max_num_cells.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_13min_num_cells_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg__min_num_cells); /*proto*/
static int __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_13min_num_cells_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg__min_num_cells) {
  int __pyx_v__min_num_cells;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg__min_num_cells); {
    __pyx_v__min_num_cells = __Pyx_PyInt_AsInt(__pyx_arg__min_num_cells); if (unlikely((__pyx_v__min_num_cells == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.min_num_cells.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_13min_num_cells___set__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self), ((int)__pyx_v__min_num_cells));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":86
 * 
 *     property min_num_cells:
 *         def __set__(self, int _min_num_cells):             # <<<<<<<<<<<<<<
 *             global min_num_cells
 *             min = calc_processor_min_num_cells()
 */

static int __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_13min_num_cells___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self, int __pyx_v__min_num_cells) {
  int __pyx_v_min;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "espressomd/global_variables.pyx":88
 *         def __set__(self, int _min_num_cells):
 *             global min_num_cells
 *             min = calc_processor_min_num_cells()             # <<<<<<<<<<<<<<
 *             if _min_num_cells < min:
 *                 raise ValueError("min_num_cells must be >= processor_min_num_cells (currently "+str(min)+")")
 */
  __pyx_v_min = calc_processor_min_num_cells();

  /* "espressomd/global_variables.pyx":89
 *             global min_num_cells
 *             min = calc_processor_min_num_cells()
 *             if _min_num_cells < min:             # <<<<<<<<<<<<<<
 *                 raise ValueError("min_num_cells must be >= processor_min_num_cells (currently "+str(min)+")")
 *             if _min_num_cells > max_num_cells:
 */
  __pyx_t_1 = ((__pyx_v__min_num_cells < __pyx_v_min) != 0);
  if (__pyx_t_1) {

    /* "espressomd/global_variables.pyx":90
 *             min = calc_processor_min_num_cells()
 *             if _min_num_cells < min:
 *                 raise ValueError("min_num_cells must be >= processor_min_num_cells (currently "+str(min)+")")             # <<<<<<<<<<<<<<
 *             if _min_num_cells > max_num_cells:
 *                 raise ValueError("min_num_cells must be <= max_num_cells (currently "+str(max_num_cells)+")")
 */
    __pyx_t_2 = PyInt_FromLong(__pyx_v_min); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(((PyObject *)__pyx_kp_s_7), __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_3, ((PyObject *)__pyx_kp_s_6)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "espressomd/global_variables.pyx":91
 *             if _min_num_cells < min:
 *                 raise ValueError("min_num_cells must be >= processor_min_num_cells (currently "+str(min)+")")
 *             if _min_num_cells > max_num_cells:             # <<<<<<<<<<<<<<
 *                 raise ValueError("min_num_cells must be <= max_num_cells (currently "+str(max_num_cells)+")")
 *             min_num_cells=_min_num_cells
 */
  __pyx_t_1 = ((__pyx_v__min_num_cells > max_num_cells) != 0);
  if (__pyx_t_1) {

    /* "espressomd/global_variables.pyx":92
 *                 raise ValueError("min_num_cells must be >= processor_min_num_cells (currently "+str(min)+")")
 *             if _min_num_cells > max_num_cells:
 *                 raise ValueError("min_num_cells must be <= max_num_cells (currently "+str(max_num_cells)+")")             # <<<<<<<<<<<<<<
 *             min_num_cells=_min_num_cells
 *             mpi_bcast_parameter(FIELD_MINNUMCELLS);
 */
    __pyx_t_2 = PyInt_FromLong(max_num_cells); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(((PyObject *)__pyx_kp_s_8), __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_3, ((PyObject *)__pyx_kp_s_6)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "espressomd/global_variables.pyx":93
 *             if _min_num_cells > max_num_cells:
 *                 raise ValueError("min_num_cells must be <= max_num_cells (currently "+str(max_num_cells)+")")
 *             min_num_cells=_min_num_cells             # <<<<<<<<<<<<<<
 *             mpi_bcast_parameter(FIELD_MINNUMCELLS);
 *         def __get__(self):
 */
  min_num_cells = __pyx_v__min_num_cells;

  /* "espressomd/global_variables.pyx":94
 *                 raise ValueError("min_num_cells must be <= max_num_cells (currently "+str(max_num_cells)+")")
 *             min_num_cells=_min_num_cells
 *             mpi_bcast_parameter(FIELD_MINNUMCELLS);             # <<<<<<<<<<<<<<
 *         def __get__(self):
 *             return min_num_cells;
 */
  mpi_bcast_parameter(FIELD_MINNUMCELLS);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.min_num_cells.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_13min_num_cells_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_13min_num_cells_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_13min_num_cells_2__get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":95
 *             min_num_cells=_min_num_cells
 *             mpi_bcast_parameter(FIELD_MINNUMCELLS);
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return min_num_cells;
 * 
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_13min_num_cells_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":96
 *             mpi_bcast_parameter(FIELD_MINNUMCELLS);
 *         def __get__(self):
 *             return min_num_cells;             # <<<<<<<<<<<<<<
 * 
 *     property max_part:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(min_num_cells); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.min_num_cells.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_8max_part_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_8max_part_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_8max_part___get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":99
 * 
 *     property max_part:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return max_seen_particle;
 * 
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_8max_part___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":100
 *     property max_part:
 *         def __get__(self):
 *             return max_seen_particle;             # <<<<<<<<<<<<<<
 * 
 *     property max_range:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(max_seen_particle); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.max_part.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_9max_range_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_9max_range_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_9max_range___get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":103
 * 
 *     property max_range:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return max_range;
 * 
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_9max_range___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":104
 *     property max_range:
 *         def __get__(self):
 *             return max_range;             # <<<<<<<<<<<<<<
 * 
 *     property max_skin:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(max_range); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.max_range.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_8max_skin_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_8max_skin_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_8max_skin___get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":107
 * 
 *     property max_skin:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return max_skin;
 * 
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_8max_skin___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":108
 *     property max_skin:
 *         def __get__(self):
 *             return max_skin;             # <<<<<<<<<<<<<<
 * 
 *     property n_layers:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(max_skin); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.max_skin.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_8n_layers_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_8n_layers_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_8n_layers___get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":111
 * 
 *     property n_layers:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return n_layers;
 * 
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_8n_layers___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":112
 *     property n_layers:
 *         def __get__(self):
 *             return n_layers;             # <<<<<<<<<<<<<<
 * 
 *     property n_nodes:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(n_layers); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.n_layers.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_7n_nodes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_7n_nodes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_7n_nodes___get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":115
 * 
 *     property n_nodes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return n_nodes;
 * 
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_7n_nodes___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":116
 *     property n_nodes:
 *         def __get__(self):
 *             return n_nodes;             # <<<<<<<<<<<<<<
 * 
 *     property n_part:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(n_nodes); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.n_nodes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_6n_part_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_6n_part_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_6n_part___get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":119
 * 
 *     property n_part:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return n_part;
 * 
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_6n_part___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":120
 *     property n_part:
 *         def __get__(self):
 *             return n_part;             # <<<<<<<<<<<<<<
 * 
 *     property n_part_types:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(n_part); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.n_part.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_12n_part_types_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_12n_part_types_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_12n_part_types___get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":123
 * 
 *     property n_part_types:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return n_particle_types;
 * 
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_12n_part_types___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":124
 *     property n_part_types:
 *         def __get__(self):
 *             return n_particle_types;             # <<<<<<<<<<<<<<
 * 
 *     property n_rigidbonds:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(n_particle_types); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.n_part_types.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_12n_rigidbonds_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_12n_rigidbonds_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_12n_rigidbonds___get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":127
 * 
 *     property n_rigidbonds:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return n_rigidbonds;
 * 
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_12n_rigidbonds___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":128
 *     property n_rigidbonds:
 *         def __get__(self):
 *             return n_rigidbonds;             # <<<<<<<<<<<<<<
 * 
 *     property node_grid:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(n_rigidbonds); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.n_rigidbonds.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_9node_grid_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v__node_grid); /*proto*/
static int __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_9node_grid_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v__node_grid) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_9node_grid___set__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self), ((PyObject *)__pyx_v__node_grid));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":131
 * 
 *     property node_grid:
 *         def __set__(self, _node_grid):             # <<<<<<<<<<<<<<
 *             global node_grid
 *             if len(_node_grid) != 3:
 */

static int __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_9node_grid___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self, PyObject *__pyx_v__node_grid) {
  long __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  long __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "espressomd/global_variables.pyx":133
 *         def __set__(self, _node_grid):
 *             global node_grid
 *             if len(_node_grid) != 3:             # <<<<<<<<<<<<<<
 *                 raise ValueError("node_grid must be of length 3")
 *             for i in range(3):
 */
  __pyx_t_1 = PyObject_Length(__pyx_v__node_grid); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_t_1 != 3) != 0);
  if (__pyx_t_2) {

    /* "espressomd/global_variables.pyx":134
 *             global node_grid
 *             if len(_node_grid) != 3:
 *                 raise ValueError("node_grid must be of length 3")             # <<<<<<<<<<<<<<
 *             for i in range(3):
 *                 if _node_grid[i] <= 0:
 */
    __pyx_t_3 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_10), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "espressomd/global_variables.pyx":135
 *             if len(_node_grid) != 3:
 *                 raise ValueError("node_grid must be of length 3")
 *             for i in range(3):             # <<<<<<<<<<<<<<
 *                 if _node_grid[i] <= 0:
 *                     raise ValueError("node_grid must be > 0 in all directions")
 */
  for (__pyx_t_4 = 0; __pyx_t_4 < 3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "espressomd/global_variables.pyx":136
 *                 raise ValueError("node_grid must be of length 3")
 *             for i in range(3):
 *                 if _node_grid[i] <= 0:             # <<<<<<<<<<<<<<
 *                     raise ValueError("node_grid must be > 0 in all directions")
 *                 node_grid[i]=_node_grid[i]
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v__node_grid, __pyx_v_i, sizeof(long), PyInt_FromLong, 0, 1, 1); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_int_0, Py_LE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "espressomd/global_variables.pyx":137
 *             for i in range(3):
 *                 if _node_grid[i] <= 0:
 *                     raise ValueError("node_grid must be > 0 in all directions")             # <<<<<<<<<<<<<<
 *                 node_grid[i]=_node_grid[i]
 *             if _node_grid[0]*_node_grid[1]*_node_grid[2] != n_nodes:
 */
      __pyx_t_5 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_12), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L6;
    }
    __pyx_L6:;

    /* "espressomd/global_variables.pyx":138
 *                 if _node_grid[i] <= 0:
 *                     raise ValueError("node_grid must be > 0 in all directions")
 *                 node_grid[i]=_node_grid[i]             # <<<<<<<<<<<<<<
 *             if _node_grid[0]*_node_grid[1]*_node_grid[2] != n_nodes:
 *                 raise ValueError("node_grid does not fit n_nodes ("+str(n_nodes)+")")
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v__node_grid, __pyx_v_i, sizeof(long), PyInt_FromLong, 0, 1, 1); if (!__pyx_t_5) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyInt_AsInt(__pyx_t_5); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    (node_grid[__pyx_v_i]) = __pyx_t_6;
  }

  /* "espressomd/global_variables.pyx":139
 *                     raise ValueError("node_grid must be > 0 in all directions")
 *                 node_grid[i]=_node_grid[i]
 *             if _node_grid[0]*_node_grid[1]*_node_grid[2] != n_nodes:             # <<<<<<<<<<<<<<
 *                 raise ValueError("node_grid does not fit n_nodes ("+str(n_nodes)+")")
 *             for i in range(3):
 */
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v__node_grid, 0, sizeof(long), PyInt_FromLong, 0, 0, 1); if (!__pyx_t_5) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v__node_grid, 1, sizeof(long), PyInt_FromLong, 0, 0, 1); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = PyNumber_Multiply(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v__node_grid, 2, sizeof(long), PyInt_FromLong, 0, 0, 1); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyInt_FromLong(n_nodes); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = PyObject_RichCompare(__pyx_t_5, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__pyx_t_2) {

    /* "espressomd/global_variables.pyx":140
 *                 node_grid[i]=_node_grid[i]
 *             if _node_grid[0]*_node_grid[1]*_node_grid[2] != n_nodes:
 *                 raise ValueError("node_grid does not fit n_nodes ("+str(n_nodes)+")")             # <<<<<<<<<<<<<<
 *             for i in range(3):
 *                 node_grid[i]=_node_grid[i]
 */
    __pyx_t_7 = PyInt_FromLong(n_nodes); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(((PyObject *)__pyx_kp_s_13), __pyx_t_7); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Add(__pyx_t_3, ((PyObject *)__pyx_kp_s_6)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_7, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "espressomd/global_variables.pyx":141
 *             if _node_grid[0]*_node_grid[1]*_node_grid[2] != n_nodes:
 *                 raise ValueError("node_grid does not fit n_nodes ("+str(n_nodes)+")")
 *             for i in range(3):             # <<<<<<<<<<<<<<
 *                 node_grid[i]=_node_grid[i]
 *             mpi_bcast_parameter(FIELD_NODEGRID)
 */
  for (__pyx_t_4 = 0; __pyx_t_4 < 3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "espressomd/global_variables.pyx":142
 *                 raise ValueError("node_grid does not fit n_nodes ("+str(n_nodes)+")")
 *             for i in range(3):
 *                 node_grid[i]=_node_grid[i]             # <<<<<<<<<<<<<<
 *             mpi_bcast_parameter(FIELD_NODEGRID)
 *         def __get__(self):
 */
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_v__node_grid, __pyx_v_i, sizeof(long), PyInt_FromLong, 0, 1, 1); if (!__pyx_t_7) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_PyInt_AsInt(__pyx_t_7); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    (node_grid[__pyx_v_i]) = __pyx_t_6;
  }

  /* "espressomd/global_variables.pyx":143
 *             for i in range(3):
 *                 node_grid[i]=_node_grid[i]
 *             mpi_bcast_parameter(FIELD_NODEGRID)             # <<<<<<<<<<<<<<
 *         def __get__(self):
 *             return np.array([node_grid[0], node_grid[1], node_grid[2]])
 */
  mpi_bcast_parameter(FIELD_NODEGRID);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.node_grid.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_9node_grid_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_9node_grid_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_9node_grid_2__get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":144
 *                 node_grid[i]=_node_grid[i]
 *             mpi_bcast_parameter(FIELD_NODEGRID)
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return np.array([node_grid[0], node_grid[1], node_grid[2]])
 * 
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_9node_grid_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":145
 *             mpi_bcast_parameter(FIELD_NODEGRID)
 *         def __get__(self):
 *             return np.array([node_grid[0], node_grid[1], node_grid[2]])             # <<<<<<<<<<<<<<
 * 
 *     property nptiso_gamma0:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s__np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s__array); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromLong((node_grid[0])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyInt_FromLong((node_grid[1])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyInt_FromLong((node_grid[2])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_t_5));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_5));
  __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.node_grid.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_13nptiso_gamma0_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_13nptiso_gamma0_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_13nptiso_gamma0___get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":148
 * 
 *     property nptiso_gamma0:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return nptiso_gamma0;
 * 
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_13nptiso_gamma0___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":149
 *     property nptiso_gamma0:
 *         def __get__(self):
 *             return nptiso_gamma0;             # <<<<<<<<<<<<<<
 * 
 *     property nptiso_gammav:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(nptiso_gamma0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.nptiso_gamma0.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_13nptiso_gammav_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_13nptiso_gammav_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_13nptiso_gammav___get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":152
 * 
 *     property nptiso_gammav:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return nptiso_gammav;
 * 
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_13nptiso_gammav___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":153
 *     property nptiso_gammav:
 *         def __get__(self):
 *             return nptiso_gammav;             # <<<<<<<<<<<<<<
 * 
 *     property npt_p_ext:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(nptiso_gammav); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.nptiso_gammav.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_9npt_p_ext_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_9npt_p_ext_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_9npt_p_ext___get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":156
 * 
 *     property npt_p_ext:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return nptiso.p_ext;
 * 
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_9npt_p_ext___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":157
 *     property npt_p_ext:
 *         def __get__(self):
 *             return nptiso.p_ext;             # <<<<<<<<<<<<<<
 * 
 *     property npt_p_inst:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(nptiso.p_ext); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.npt_p_ext.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_10npt_p_inst_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_10npt_p_inst_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_10npt_p_inst___get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":160
 * 
 *     property npt_p_inst:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return nptiso.p_inst;
 * 
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_10npt_p_inst___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":161
 *     property npt_p_inst:
 *         def __get__(self):
 *             return nptiso.p_inst;             # <<<<<<<<<<<<<<
 * 
 *     property npt_p_inst_av:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(nptiso.p_inst); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.npt_p_inst.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_13npt_p_inst_av_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_13npt_p_inst_av_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_13npt_p_inst_av___get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":164
 * 
 *     property npt_p_inst_av:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return nptiso.p_inst_av;
 * 
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_13npt_p_inst_av___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":165
 *     property npt_p_inst_av:
 *         def __get__(self):
 *             return nptiso.p_inst_av;             # <<<<<<<<<<<<<<
 * 
 *     property npt_piston:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(nptiso.p_inst_av); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.npt_p_inst_av.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_10npt_piston_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v__npt_piston); /*proto*/
static int __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_10npt_piston_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v__npt_piston) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_10npt_piston___set__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self), ((PyObject *)__pyx_v__npt_piston));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":168
 * 
 *     property npt_piston:
 *         def __set__(self, _npt_piston):             # <<<<<<<<<<<<<<
 *             global npt_piston
 *             if _npt_piston < 0:
 */

static int __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_10npt_piston___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self, PyObject *__pyx_v__npt_piston) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  double __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "espressomd/global_variables.pyx":170
 *         def __set__(self, _npt_piston):
 *             global npt_piston
 *             if _npt_piston < 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("npt_piston must be > 0")
 *             nptiso.piston=_npt_piston
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v__npt_piston, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "espressomd/global_variables.pyx":171
 *             global npt_piston
 *             if _npt_piston < 0:
 *                 raise ValueError("npt_piston must be > 0")             # <<<<<<<<<<<<<<
 *             nptiso.piston=_npt_piston
 *             mpi_bcast_parameter(FIELD_NPTISO_PISTON)
 */
    __pyx_t_1 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_15), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "espressomd/global_variables.pyx":172
 *             if _npt_piston < 0:
 *                 raise ValueError("npt_piston must be > 0")
 *             nptiso.piston=_npt_piston             # <<<<<<<<<<<<<<
 *             mpi_bcast_parameter(FIELD_NPTISO_PISTON)
 *         def __get__(self):
 */
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v__npt_piston); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  nptiso.piston = __pyx_t_3;

  /* "espressomd/global_variables.pyx":173
 *                 raise ValueError("npt_piston must be > 0")
 *             nptiso.piston=_npt_piston
 *             mpi_bcast_parameter(FIELD_NPTISO_PISTON)             # <<<<<<<<<<<<<<
 *         def __get__(self):
 *             global npt_piston
 */
  mpi_bcast_parameter(FIELD_NPTISO_PISTON);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.npt_piston.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_10npt_piston_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_10npt_piston_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_10npt_piston_2__get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":174
 *             nptiso.piston=_npt_piston
 *             mpi_bcast_parameter(FIELD_NPTISO_PISTON)
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global npt_piston
 *             return nptiso.piston
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_10npt_piston_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":176
 *         def __get__(self):
 *             global npt_piston
 *             return nptiso.piston             # <<<<<<<<<<<<<<
 * 
 *     property npt_p_diff:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(nptiso.piston); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.npt_piston.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_10npt_p_diff_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v__npt_p_diff); /*proto*/
static int __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_10npt_p_diff_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v__npt_p_diff) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_10npt_p_diff___set__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self), ((PyObject *)__pyx_v__npt_p_diff));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":179
 * 
 *     property npt_p_diff:
 *         def __set__(self, _npt_p_diff):             # <<<<<<<<<<<<<<
 *             global npt_p_diff
 *             nptiso.p_diff=_npt_p_diff
 */

static int __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_10npt_p_diff___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self, PyObject *__pyx_v__npt_p_diff) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "espressomd/global_variables.pyx":181
 *         def __set__(self, _npt_p_diff):
 *             global npt_p_diff
 *             nptiso.p_diff=_npt_p_diff             # <<<<<<<<<<<<<<
 *             mpi_bcast_parameter(FIELD_NPTISO_PDIFF)
 *         def __get__(self):
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v__npt_p_diff); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  nptiso.p_diff = __pyx_t_1;

  /* "espressomd/global_variables.pyx":182
 *             global npt_p_diff
 *             nptiso.p_diff=_npt_p_diff
 *             mpi_bcast_parameter(FIELD_NPTISO_PDIFF)             # <<<<<<<<<<<<<<
 *         def __get__(self):
 *             global npt_p_diff
 */
  mpi_bcast_parameter(FIELD_NPTISO_PDIFF);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.npt_p_diff.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_10npt_p_diff_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_10npt_p_diff_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_10npt_p_diff_2__get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":183
 *             nptiso.p_diff=_npt_p_diff
 *             mpi_bcast_parameter(FIELD_NPTISO_PDIFF)
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global npt_p_diff
 *             return nptiso.p_diff
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_10npt_p_diff_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":185
 *         def __get__(self):
 *             global npt_p_diff
 *             return nptiso.p_diff             # <<<<<<<<<<<<<<
 * 
 *     property periodicity:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(nptiso.p_diff); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.npt_p_diff.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_11periodicity_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v__periodic); /*proto*/
static int __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_11periodicity_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v__periodic) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_11periodicity___set__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self), ((PyObject *)__pyx_v__periodic));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":188
 * 
 *     property periodicity:
 *         def __set__(self, _periodic):             # <<<<<<<<<<<<<<
 *             global periodic
 *             if len(_periodic) != 3:
 */

static int __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_11periodicity___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self, PyObject *__pyx_v__periodic) {
  PyObject *__pyx_v_periodicity = NULL;
  long __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  long __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "espressomd/global_variables.pyx":190
 *         def __set__(self, _periodic):
 *             global periodic
 *             if len(_periodic) != 3:             # <<<<<<<<<<<<<<
 *                 raise ValueError("periodicity must be of length 3, got length "+str(len(_periodic)))
 *             periodicity=np.zeros(3);
 */
  __pyx_t_1 = PyObject_Length(__pyx_v__periodic); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_t_1 != 3) != 0);
  if (__pyx_t_2) {

    /* "espressomd/global_variables.pyx":191
 *             global periodic
 *             if len(_periodic) != 3:
 *                 raise ValueError("periodicity must be of length 3, got length "+str(len(_periodic)))             # <<<<<<<<<<<<<<
 *             periodicity=np.zeros(3);
 *             for i in range(3):
 */
    __pyx_t_1 = PyObject_Length(__pyx_v__periodic); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(((PyObject *)__pyx_kp_s_16), __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "espressomd/global_variables.pyx":192
 *             if len(_periodic) != 3:
 *                 raise ValueError("periodicity must be of length 3, got length "+str(len(_periodic)))
 *             periodicity=np.zeros(3);             # <<<<<<<<<<<<<<
 *             for i in range(3):
 *                 if _periodic[i] != 1:
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s__np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s__zeros); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_k_tuple_17), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_periodicity = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "espressomd/global_variables.pyx":193
 *                 raise ValueError("periodicity must be of length 3, got length "+str(len(_periodic)))
 *             periodicity=np.zeros(3);
 *             for i in range(3):             # <<<<<<<<<<<<<<
 *                 if _periodic[i] != 1:
 *                     raise ValueError("Until we can handle conditional compilation, only periodicity [1,1,1] is supported in python interface")
 */
  for (__pyx_t_5 = 0; __pyx_t_5 < 3; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "espressomd/global_variables.pyx":194
 *             periodicity=np.zeros(3);
 *             for i in range(3):
 *                 if _periodic[i] != 1:             # <<<<<<<<<<<<<<
 *                     raise ValueError("Until we can handle conditional compilation, only periodicity [1,1,1] is supported in python interface")
 *             for i in range(3):
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v__periodic, __pyx_v_i, sizeof(long), PyInt_FromLong, 0, 1, 1); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_4, __pyx_int_1, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "espressomd/global_variables.pyx":195
 *             for i in range(3):
 *                 if _periodic[i] != 1:
 *                     raise ValueError("Until we can handle conditional compilation, only periodicity [1,1,1] is supported in python interface")             # <<<<<<<<<<<<<<
 *             for i in range(3):
 *                 periodicity[i]=_periodic[i];
 */
      __pyx_t_3 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_19), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L6;
    }
    __pyx_L6:;
  }

  /* "espressomd/global_variables.pyx":196
 *                 if _periodic[i] != 1:
 *                     raise ValueError("Until we can handle conditional compilation, only periodicity [1,1,1] is supported in python interface")
 *             for i in range(3):             # <<<<<<<<<<<<<<
 *                 periodicity[i]=_periodic[i];
 *             periodic=4*_periodic[2] + 2*_periodic[1] + _periodic[0];
 */
  for (__pyx_t_5 = 0; __pyx_t_5 < 3; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "espressomd/global_variables.pyx":197
 *                     raise ValueError("Until we can handle conditional compilation, only periodicity [1,1,1] is supported in python interface")
 *             for i in range(3):
 *                 periodicity[i]=_periodic[i];             # <<<<<<<<<<<<<<
 *             periodic=4*_periodic[2] + 2*_periodic[1] + _periodic[0];
 *             # first 3 bits of periodic determine the periodicity
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v__periodic, __pyx_v_i, sizeof(long), PyInt_FromLong, 0, 1, 1); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_SetItemInt(__pyx_v_periodicity, __pyx_v_i, __pyx_t_3, sizeof(long), PyInt_FromLong, 0, 1, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }

  /* "espressomd/global_variables.pyx":198
 *             for i in range(3):
 *                 periodicity[i]=_periodic[i];
 *             periodic=4*_periodic[2] + 2*_periodic[1] + _periodic[0];             # <<<<<<<<<<<<<<
 *             # first 3 bits of periodic determine the periodicity
 *             # until we can handle contitional compilatio, periodic=7 is the only value which makes sense
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v__periodic, 2, sizeof(long), PyInt_FromLong, 0, 0, 1); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Multiply(__pyx_int_4, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v__periodic, 1, sizeof(long), PyInt_FromLong, 0, 0, 1); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = PyNumber_Multiply(__pyx_int_2, __pyx_t_3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v__periodic, 0, sizeof(long), PyInt_FromLong, 0, 0, 1); if (!__pyx_t_6) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_7 = __Pyx_PyInt_AsInt(__pyx_t_4); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  periodic = __pyx_t_7;

  /* "espressomd/global_variables.pyx":201
 *             # first 3 bits of periodic determine the periodicity
 *             # until we can handle contitional compilatio, periodic=7 is the only value which makes sense
 *             mpi_bcast_parameter(FIELD_PERIODIC);             # <<<<<<<<<<<<<<
 *         def __get__(self):
 *             global periodic
 */
  mpi_bcast_parameter(FIELD_PERIODIC);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.periodicity.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_periodicity);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_11periodicity_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_11periodicity_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_11periodicity_2__get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":202
 *             # until we can handle contitional compilatio, periodic=7 is the only value which makes sense
 *             mpi_bcast_parameter(FIELD_PERIODIC);
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global periodic
 *             periodicity=np.zeros(3);
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_11periodicity_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_v_periodicity = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":204
 *         def __get__(self):
 *             global periodic
 *             periodicity=np.zeros(3);             # <<<<<<<<<<<<<<
 *             periodicity[0]=periodic%2;
 *             periodicity[1]=int(periodic/2)%2;
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s__np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s__zeros); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_k_tuple_20), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_periodicity = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "espressomd/global_variables.pyx":205
 *             global periodic
 *             periodicity=np.zeros(3);
 *             periodicity[0]=periodic%2;             # <<<<<<<<<<<<<<
 *             periodicity[1]=int(periodic/2)%2;
 *             periodicity[2]=int(periodic/4)%2;
 */
  __pyx_t_1 = PyInt_FromLong(__Pyx_mod_long(periodic, 2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_SetItemInt(__pyx_v_periodicity, 0, __pyx_t_1, sizeof(long), PyInt_FromLong, 0, 0, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/global_variables.pyx":206
 *             periodicity=np.zeros(3);
 *             periodicity[0]=periodic%2;
 *             periodicity[1]=int(periodic/2)%2;             # <<<<<<<<<<<<<<
 *             periodicity[2]=int(periodic/4)%2;
 *             return periodicity
 */
  __pyx_t_1 = PyInt_FromLong(__Pyx_div_long(periodic, 2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Remainder(__pyx_t_1, __pyx_int_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_SetItemInt(__pyx_v_periodicity, 1, __pyx_t_2, sizeof(long), PyInt_FromLong, 0, 0, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/global_variables.pyx":207
 *             periodicity[0]=periodic%2;
 *             periodicity[1]=int(periodic/2)%2;
 *             periodicity[2]=int(periodic/4)%2;             # <<<<<<<<<<<<<<
 *             return periodicity
 * 
 */
  __pyx_t_2 = PyInt_FromLong(__Pyx_div_long(periodic, 4)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Remainder(__pyx_t_2, __pyx_int_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetItemInt(__pyx_v_periodicity, 2, __pyx_t_1, sizeof(long), PyInt_FromLong, 0, 0, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/global_variables.pyx":208
 *             periodicity[1]=int(periodic/2)%2;
 *             periodicity[2]=int(periodic/4)%2;
 *             return periodicity             # <<<<<<<<<<<<<<
 * 
 *     property skin:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_periodicity);
  __pyx_r = __pyx_v_periodicity;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.periodicity.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_periodicity);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_4skin_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg__skin); /*proto*/
static int __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_4skin_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg__skin) {
  double __pyx_v__skin;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg__skin); {
    __pyx_v__skin = __pyx_PyFloat_AsDouble(__pyx_arg__skin); if (unlikely((__pyx_v__skin == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.skin.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_4skin___set__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self), ((double)__pyx_v__skin));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":211
 * 
 *     property skin:
 *         def __set__(self, double _skin):             # <<<<<<<<<<<<<<
 *             if _skin <= 0:
 *                 raise ValueError("Skin must be >= 0")
 */

static int __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_4skin___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self, double __pyx_v__skin) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "espressomd/global_variables.pyx":212
 *     property skin:
 *         def __set__(self, double _skin):
 *             if _skin <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Skin must be >= 0")
 *             global skin
 */
  __pyx_t_1 = ((__pyx_v__skin <= 0.0) != 0);
  if (__pyx_t_1) {

    /* "espressomd/global_variables.pyx":213
 *         def __set__(self, double _skin):
 *             if _skin <= 0:
 *                 raise ValueError("Skin must be >= 0")             # <<<<<<<<<<<<<<
 *             global skin
 *             skin=_skin
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_22), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "espressomd/global_variables.pyx":215
 *                 raise ValueError("Skin must be >= 0")
 *             global skin
 *             skin=_skin             # <<<<<<<<<<<<<<
 *             mpi_bcast_parameter(28)
 *         def __get__(self):
 */
  skin = __pyx_v__skin;

  /* "espressomd/global_variables.pyx":216
 *             global skin
 *             skin=_skin
 *             mpi_bcast_parameter(28)             # <<<<<<<<<<<<<<
 *         def __get__(self):
 *             global skin
 */
  mpi_bcast_parameter(28);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.skin.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_4skin_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_4skin_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_4skin_2__get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":217
 *             skin=_skin
 *             mpi_bcast_parameter(28)
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global skin
 *             return skin
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_4skin_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":219
 *         def __get__(self):
 *             global skin
 *             return skin             # <<<<<<<<<<<<<<
 * 
 *     property temperature:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(skin); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.skin.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_11temperature_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_11temperature_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_11temperature___get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":222
 * 
 *     property temperature:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global temperature;
 *             return temperature;
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_11temperature___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":224
 *         def __get__(self):
 *             global temperature;
 *             return temperature;             # <<<<<<<<<<<<<<
 * 
 *     property thermo_switch:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(temperature); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.temperature.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_13thermo_switch_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_13thermo_switch_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_13thermo_switch___get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":227
 * 
 *     property thermo_switch:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global thermo_switch;
 *             return thermo_switch;
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_13thermo_switch___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":229
 *         def __get__(self):
 *             global thermo_switch;
 *             return thermo_switch;             # <<<<<<<<<<<<<<
 * 
 *     property time:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(thermo_switch); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.thermo_switch.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_4time_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg__time); /*proto*/
static int __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_4time_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg__time) {
  double __pyx_v__time;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg__time); {
    __pyx_v__time = __pyx_PyFloat_AsDouble(__pyx_arg__time); if (unlikely((__pyx_v__time == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.time.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_4time___set__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self), ((double)__pyx_v__time));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":232
 * 
 *     property time:
 *         def __set__(self, double _time):             # <<<<<<<<<<<<<<
 *             if _time <= 0:
 *                 raise ValueError("Simulation time must be >= 0")
 */

static int __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_4time___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self, double __pyx_v__time) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "espressomd/global_variables.pyx":233
 *     property time:
 *         def __set__(self, double _time):
 *             if _time <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Simulation time must be >= 0")
 *             global sim_time
 */
  __pyx_t_1 = ((__pyx_v__time <= 0.0) != 0);
  if (__pyx_t_1) {

    /* "espressomd/global_variables.pyx":234
 *         def __set__(self, double _time):
 *             if _time <= 0:
 *                 raise ValueError("Simulation time must be >= 0")             # <<<<<<<<<<<<<<
 *             global sim_time
 *             sim_time=_time
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_24), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "espressomd/global_variables.pyx":236
 *                 raise ValueError("Simulation time must be >= 0")
 *             global sim_time
 *             sim_time=_time             # <<<<<<<<<<<<<<
 *             mpi_bcast_parameter(FIELD_SIMTIME)
 *         def __get__(self):
 */
  sim_time = __pyx_v__time;

  /* "espressomd/global_variables.pyx":237
 *             global sim_time
 *             sim_time=_time
 *             mpi_bcast_parameter(FIELD_SIMTIME)             # <<<<<<<<<<<<<<
 *         def __get__(self):
 *             global sim_time
 */
  mpi_bcast_parameter(FIELD_SIMTIME);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.time.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_4time_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_4time_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_4time_2__get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":238
 *             sim_time=_time
 *             mpi_bcast_parameter(FIELD_SIMTIME)
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global sim_time
 *             return sim_time
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_4time_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":240
 *         def __get__(self):
 *             global sim_time
 *             return sim_time             # <<<<<<<<<<<<<<
 * 
 *     property time_step:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(sim_time); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.time.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_9time_step_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg__time_step); /*proto*/
static int __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_9time_step_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg__time_step) {
  double __pyx_v__time_step;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg__time_step); {
    __pyx_v__time_step = __pyx_PyFloat_AsDouble(__pyx_arg__time_step); if (unlikely((__pyx_v__time_step == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.time_step.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_9time_step___set__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self), ((double)__pyx_v__time_step));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":243
 * 
 *     property time_step:
 *         def __set__(self, double _time_step):             # <<<<<<<<<<<<<<
 *             IF LB:
 *                 global lbpar
 */

static int __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_9time_step___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self, double __pyx_v__time_step) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "espressomd/global_variables.pyx":248
 *             IF LB_GPU:
 *                 global lbpar_gpu
 *             if _time_step <= 0:             # <<<<<<<<<<<<<<
 *               raise ValueError("Time Step must be positive")
 *             IF LB:
 */
  __pyx_t_1 = ((__pyx_v__time_step <= 0.0) != 0);
  if (__pyx_t_1) {

    /* "espressomd/global_variables.pyx":249
 *                 global lbpar_gpu
 *             if _time_step <= 0:
 *               raise ValueError("Time Step must be positive")             # <<<<<<<<<<<<<<
 *             IF LB:
 *                 if lbpar.tau >= 0.0 and _time_step > lbpar.tau:
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_26), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "espressomd/global_variables.pyx":256
 *                 if lbpar_gpu.tau >= 0.0 and _time_step > lbpar_gpu.tau:
 *                   raise ValueError("Time Step must be > LB_time_step ("+str(lbpar_gpu.tau)+")")
 *             mpi_set_time_step(_time_step)             # <<<<<<<<<<<<<<
 *         def __get__(self):
 *             global time_step
 */
  mpi_set_time_step(__pyx_v__time_step);

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.time_step.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_9time_step_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_9time_step_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_9time_step_2__get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":257
 *                   raise ValueError("Time Step must be > LB_time_step ("+str(lbpar_gpu.tau)+")")
 *             mpi_set_time_step(_time_step)
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global time_step
 *             return time_step
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_9time_step_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":259
 *         def __get__(self):
 *             global time_step
 *             return time_step             # <<<<<<<<<<<<<<
 * 
 *     property timings:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(time_step); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.time_step.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_7timings_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg__timings); /*proto*/
static int __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_7timings_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg__timings) {
  int __pyx_v__timings;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg__timings); {
    __pyx_v__timings = __Pyx_PyInt_AsInt(__pyx_arg__timings); if (unlikely((__pyx_v__timings == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.timings.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_7timings___set__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self), ((int)__pyx_v__timings));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":262
 * 
 *     property timings:
 *         def __set__(self, int _timings):             # <<<<<<<<<<<<<<
 *             global timing_samples;
 *             if _timings <= 0:
 */

static int __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_7timings___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self, int __pyx_v__timings) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "espressomd/global_variables.pyx":264
 *         def __set__(self, int _timings):
 *             global timing_samples;
 *             if _timings <= 0:             # <<<<<<<<<<<<<<
 *                 timing_samples=0;
 *             else:
 */
  __pyx_t_1 = ((__pyx_v__timings <= 0) != 0);
  if (__pyx_t_1) {

    /* "espressomd/global_variables.pyx":265
 *             global timing_samples;
 *             if _timings <= 0:
 *                 timing_samples=0;             # <<<<<<<<<<<<<<
 *             else:
 *                 timing_samples=_timings;
 */
    timing_samples = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "espressomd/global_variables.pyx":267
 *                 timing_samples=0;
 *             else:
 *                 timing_samples=_timings;             # <<<<<<<<<<<<<<
 *         def __get__(self):
 *             global timing_samples
 */
    timing_samples = __pyx_v__timings;
  }
  __pyx_L3:;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_7timings_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_7timings_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_7timings_2__get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":268
 *             else:
 *                 timing_samples=_timings;
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global timing_samples
 *             return timing_samples
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_7timings_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":270
 *         def __get__(self):
 *             global timing_samples
 *             return timing_samples             # <<<<<<<<<<<<<<
 * 
 *     property transfer_rate:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(timing_samples); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.timings.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_13transfer_rate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_13transfer_rate_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_13transfer_rate___get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":273
 * 
 *     property transfer_rate:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global transfer_rate;
 *             return transfer_rate;
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_13transfer_rate___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":275
 *         def __get__(self):
 *             global transfer_rate;
 *             return transfer_rate;             # <<<<<<<<<<<<<<
 * 
 *     property max_cut_nonbonded:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(transfer_rate); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.transfer_rate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_17max_cut_nonbonded_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_17max_cut_nonbonded_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_17max_cut_nonbonded___get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":278
 * 
 *     property max_cut_nonbonded:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global max_cut_nonbonded;
 *             return max_cut_nonbonded;
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_17max_cut_nonbonded___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":280
 *         def __get__(self):
 *             global max_cut_nonbonded;
 *             return max_cut_nonbonded;             # <<<<<<<<<<<<<<
 * 
 *     property verlet_reuse:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(max_cut_nonbonded); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.max_cut_nonbonded.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_12verlet_reuse_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_12verlet_reuse_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_12verlet_reuse___get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":283
 * 
 *     property verlet_reuse:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global verlet_reuse;
 *             return verlet_reuse;
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_12verlet_reuse___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":285
 *         def __get__(self):
 *             global verlet_reuse;
 *             return verlet_reuse;             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(verlet_reuse); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.verlet_reuse.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_14lattice_switch_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_14lattice_switch_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_14lattice_switch___get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":289
 * 
 *     property lattice_switch:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global lattice_switch;
 *             return lattice_switch;
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_14lattice_switch___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":291
 *         def __get__(self):
 *             global lattice_switch;
 *             return lattice_switch;             # <<<<<<<<<<<<<<
 * 
 *     property dpd_tgamma:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(lattice_switch); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.lattice_switch.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_10dpd_tgamma_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_10dpd_tgamma_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_10dpd_tgamma___get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":294
 * 
 *     property dpd_tgamma:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global dpd_tgamma;
 *             return dpd_tgamma;
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_10dpd_tgamma___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":296
 *         def __get__(self):
 *             global dpd_tgamma;
 *             return dpd_tgamma;             # <<<<<<<<<<<<<<
 * 
 *     property dpd_tr_cut:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(dpd_tgamma); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.dpd_tgamma.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_10dpd_tr_cut_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_10dpd_tr_cut_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_10dpd_tr_cut___get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":299
 * 
 *     property dpd_tr_cut:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global dpd_tr_cut;
 *             return dpd_tr_cut;
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_10dpd_tr_cut___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":301
 *         def __get__(self):
 *             global dpd_tr_cut;
 *             return dpd_tr_cut;             # <<<<<<<<<<<<<<
 * 
 *     property dpd_twf:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(dpd_tr_cut); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.dpd_tr_cut.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_7dpd_twf_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_7dpd_twf_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_7dpd_twf___get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":304
 * 
 *     property dpd_twf:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global dpd_twf;
 *             return dpd_twf;
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_7dpd_twf___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":306
 *         def __get__(self):
 *             global dpd_twf;
 *             return dpd_twf;             # <<<<<<<<<<<<<<
 * 
 *     property dpd_wf:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(dpd_twf); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.dpd_twf.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_6dpd_wf_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_6dpd_wf_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_6dpd_wf___get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":309
 * 
 *     property dpd_wf:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global dpd_wf;
 *             return dpd_wf;
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_6dpd_wf___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":311
 *         def __get__(self):
 *             global dpd_wf;
 *             return dpd_wf;             # <<<<<<<<<<<<<<
 * 
 *     property adress_vars:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(dpd_wf); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.dpd_wf.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_11adress_vars_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_11adress_vars_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_11adress_vars___get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":314
 * 
 *     property adress_vars:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global adress_vars;
 *             return np.array( [ \
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_11adress_vars___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":316
 *         def __get__(self):
 *             global adress_vars;
 *             return np.array( [ \             # <<<<<<<<<<<<<<
 *             adress_vars[0], \
 *             adress_vars[1], \
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s__np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s__array); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/global_variables.pyx":317
 *             global adress_vars;
 *             return np.array( [ \
 *             adress_vars[0], \             # <<<<<<<<<<<<<<
 *             adress_vars[1], \
 *             adress_vars[2], \
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s__adress_vars); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 0, sizeof(long), PyInt_FromLong, 0, 0, 1); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/global_variables.pyx":318
 *             return np.array( [ \
 *             adress_vars[0], \
 *             adress_vars[1], \             # <<<<<<<<<<<<<<
 *             adress_vars[2], \
 *             adress_vars[3], \
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s__adress_vars); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, 1, sizeof(long), PyInt_FromLong, 0, 0, 1); if (!__pyx_t_4) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/global_variables.pyx":319
 *             adress_vars[0], \
 *             adress_vars[1], \
 *             adress_vars[2], \             # <<<<<<<<<<<<<<
 *             adress_vars[3], \
 *             adress_vars[4], \
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s__adress_vars); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_1, 2, sizeof(long), PyInt_FromLong, 0, 0, 1); if (!__pyx_t_5) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/global_variables.pyx":320
 *             adress_vars[1], \
 *             adress_vars[2], \
 *             adress_vars[3], \             # <<<<<<<<<<<<<<
 *             adress_vars[4], \
 *             adress_vars[5], \
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s__adress_vars); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_1, 3, sizeof(long), PyInt_FromLong, 0, 0, 1); if (!__pyx_t_6) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/global_variables.pyx":321
 *             adress_vars[2], \
 *             adress_vars[3], \
 *             adress_vars[4], \             # <<<<<<<<<<<<<<
 *             adress_vars[5], \
 *             adress_vars[6] \
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s__adress_vars); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_1, 4, sizeof(long), PyInt_FromLong, 0, 0, 1); if (!__pyx_t_7) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/global_variables.pyx":322
 *             adress_vars[3], \
 *             adress_vars[4], \
 *             adress_vars[5], \             # <<<<<<<<<<<<<<
 *             adress_vars[6] \
 *             ])
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s__adress_vars); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_1, 5, sizeof(long), PyInt_FromLong, 0, 0, 1); if (!__pyx_t_8) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/global_variables.pyx":323
 *             adress_vars[4], \
 *             adress_vars[5], \
 *             adress_vars[6] \             # <<<<<<<<<<<<<<
 *             ])
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s__adress_vars); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_1, 6, sizeof(long), PyInt_FromLong, 0, 0, 1); if (!__pyx_t_9) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_9, 0, ((PyObject *)__pyx_t_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_9), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_9)); __pyx_t_9 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.adress_vars.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_14max_cut_bonded_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_16global_variables_13GlobalsHandle_14max_cut_bonded_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_16global_variables_13GlobalsHandle_14max_cut_bonded___get__(((struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/global_variables.pyx":327
 * 
 *     property max_cut_bonded:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global max_cut_bonded;
 *             return max_cut_bonded;
 */

static PyObject *__pyx_pf_10espressomd_16global_variables_13GlobalsHandle_14max_cut_bonded___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/global_variables.pyx":329
 *         def __get__(self):
 *             global max_cut_bonded;
 *             return max_cut_bonded;             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(max_cut_bonded); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd.global_variables.GlobalsHandle.max_cut_bonded.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_10espressomd_16global_variables_GlobalsHandle(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_10espressomd_16global_variables_GlobalsHandle(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_box_l(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_5box_l_3__get__(o);
}

static int __pyx_setprop_10espressomd_16global_variables_13GlobalsHandle_box_l(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_5box_l_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_cell_grid(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_9cell_grid_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_cell_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_9cell_size_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_dpd_gamma(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_9dpd_gamma_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_dpd_r_cut(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_9dpd_r_cut_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_gamma(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_5gamma_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_integ_switch(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_12integ_switch_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_local_box_l(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_11local_box_l_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_max_cut(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_7max_cut_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_max_num_cells(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_13max_num_cells_3__get__(o);
}

static int __pyx_setprop_10espressomd_16global_variables_13GlobalsHandle_max_num_cells(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_13max_num_cells_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_min_num_cells(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_13min_num_cells_3__get__(o);
}

static int __pyx_setprop_10espressomd_16global_variables_13GlobalsHandle_min_num_cells(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_13min_num_cells_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_max_part(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_8max_part_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_max_range(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_9max_range_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_max_skin(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_8max_skin_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_n_layers(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_8n_layers_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_n_nodes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_7n_nodes_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_n_part(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_6n_part_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_n_part_types(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_12n_part_types_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_n_rigidbonds(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_12n_rigidbonds_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_node_grid(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_9node_grid_3__get__(o);
}

static int __pyx_setprop_10espressomd_16global_variables_13GlobalsHandle_node_grid(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_9node_grid_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_nptiso_gamma0(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_13nptiso_gamma0_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_nptiso_gammav(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_13nptiso_gammav_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_npt_p_ext(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_9npt_p_ext_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_npt_p_inst(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_10npt_p_inst_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_npt_p_inst_av(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_13npt_p_inst_av_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_npt_piston(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_10npt_piston_3__get__(o);
}

static int __pyx_setprop_10espressomd_16global_variables_13GlobalsHandle_npt_piston(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_10npt_piston_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_npt_p_diff(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_10npt_p_diff_3__get__(o);
}

static int __pyx_setprop_10espressomd_16global_variables_13GlobalsHandle_npt_p_diff(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_10npt_p_diff_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_periodicity(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_11periodicity_3__get__(o);
}

static int __pyx_setprop_10espressomd_16global_variables_13GlobalsHandle_periodicity(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_11periodicity_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_skin(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_4skin_3__get__(o);
}

static int __pyx_setprop_10espressomd_16global_variables_13GlobalsHandle_skin(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_4skin_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_temperature(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_11temperature_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_thermo_switch(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_13thermo_switch_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_time(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_4time_3__get__(o);
}

static int __pyx_setprop_10espressomd_16global_variables_13GlobalsHandle_time(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_4time_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_time_step(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_9time_step_3__get__(o);
}

static int __pyx_setprop_10espressomd_16global_variables_13GlobalsHandle_time_step(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_9time_step_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_timings(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_7timings_3__get__(o);
}

static int __pyx_setprop_10espressomd_16global_variables_13GlobalsHandle_timings(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_7timings_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_transfer_rate(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_13transfer_rate_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_max_cut_nonbonded(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_17max_cut_nonbonded_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_verlet_reuse(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_12verlet_reuse_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_lattice_switch(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_14lattice_switch_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_dpd_tgamma(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_10dpd_tgamma_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_dpd_tr_cut(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_10dpd_tr_cut_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_dpd_twf(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_7dpd_twf_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_dpd_wf(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_6dpd_wf_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_adress_vars(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_11adress_vars_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_max_cut_bonded(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_14max_cut_bonded_1__get__(o);
}

static PyMethodDef __pyx_methods_10espressomd_16global_variables_GlobalsHandle[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_10espressomd_16global_variables_GlobalsHandle[] = {
  {(char *)"box_l", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_box_l, __pyx_setprop_10espressomd_16global_variables_13GlobalsHandle_box_l, 0, 0},
  {(char *)"cell_grid", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_cell_grid, 0, 0, 0},
  {(char *)"cell_size", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_cell_size, 0, 0, 0},
  {(char *)"dpd_gamma", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_dpd_gamma, 0, 0, 0},
  {(char *)"dpd_r_cut", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_dpd_r_cut, 0, 0, 0},
  {(char *)"gamma", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_gamma, 0, 0, 0},
  {(char *)"integ_switch", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_integ_switch, 0, 0, 0},
  {(char *)"local_box_l", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_local_box_l, 0, 0, 0},
  {(char *)"max_cut", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_max_cut, 0, 0, 0},
  {(char *)"max_num_cells", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_max_num_cells, __pyx_setprop_10espressomd_16global_variables_13GlobalsHandle_max_num_cells, 0, 0},
  {(char *)"min_num_cells", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_min_num_cells, __pyx_setprop_10espressomd_16global_variables_13GlobalsHandle_min_num_cells, 0, 0},
  {(char *)"max_part", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_max_part, 0, 0, 0},
  {(char *)"max_range", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_max_range, 0, 0, 0},
  {(char *)"max_skin", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_max_skin, 0, 0, 0},
  {(char *)"n_layers", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_n_layers, 0, 0, 0},
  {(char *)"n_nodes", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_n_nodes, 0, 0, 0},
  {(char *)"n_part", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_n_part, 0, 0, 0},
  {(char *)"n_part_types", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_n_part_types, 0, 0, 0},
  {(char *)"n_rigidbonds", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_n_rigidbonds, 0, 0, 0},
  {(char *)"node_grid", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_node_grid, __pyx_setprop_10espressomd_16global_variables_13GlobalsHandle_node_grid, 0, 0},
  {(char *)"nptiso_gamma0", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_nptiso_gamma0, 0, 0, 0},
  {(char *)"nptiso_gammav", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_nptiso_gammav, 0, 0, 0},
  {(char *)"npt_p_ext", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_npt_p_ext, 0, 0, 0},
  {(char *)"npt_p_inst", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_npt_p_inst, 0, 0, 0},
  {(char *)"npt_p_inst_av", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_npt_p_inst_av, 0, 0, 0},
  {(char *)"npt_piston", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_npt_piston, __pyx_setprop_10espressomd_16global_variables_13GlobalsHandle_npt_piston, 0, 0},
  {(char *)"npt_p_diff", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_npt_p_diff, __pyx_setprop_10espressomd_16global_variables_13GlobalsHandle_npt_p_diff, 0, 0},
  {(char *)"periodicity", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_periodicity, __pyx_setprop_10espressomd_16global_variables_13GlobalsHandle_periodicity, 0, 0},
  {(char *)"skin", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_skin, __pyx_setprop_10espressomd_16global_variables_13GlobalsHandle_skin, 0, 0},
  {(char *)"temperature", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_temperature, 0, 0, 0},
  {(char *)"thermo_switch", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_thermo_switch, 0, 0, 0},
  {(char *)"time", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_time, __pyx_setprop_10espressomd_16global_variables_13GlobalsHandle_time, 0, 0},
  {(char *)"time_step", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_time_step, __pyx_setprop_10espressomd_16global_variables_13GlobalsHandle_time_step, 0, 0},
  {(char *)"timings", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_timings, __pyx_setprop_10espressomd_16global_variables_13GlobalsHandle_timings, 0, 0},
  {(char *)"transfer_rate", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_transfer_rate, 0, 0, 0},
  {(char *)"max_cut_nonbonded", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_max_cut_nonbonded, 0, 0, 0},
  {(char *)"verlet_reuse", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_verlet_reuse, 0, 0, 0},
  {(char *)"lattice_switch", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_lattice_switch, 0, 0, 0},
  {(char *)"dpd_tgamma", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_dpd_tgamma, 0, 0, 0},
  {(char *)"dpd_tr_cut", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_dpd_tr_cut, 0, 0, 0},
  {(char *)"dpd_twf", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_dpd_twf, 0, 0, 0},
  {(char *)"dpd_wf", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_dpd_wf, 0, 0, 0},
  {(char *)"adress_vars", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_adress_vars, 0, 0, 0},
  {(char *)"max_cut_bonded", __pyx_getprop_10espressomd_16global_variables_13GlobalsHandle_max_cut_bonded, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10espressomd_16global_variables_GlobalsHandle = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("espressomd.global_variables.GlobalsHandle"), /*tp_name*/
  sizeof(struct __pyx_obj_10espressomd_16global_variables_GlobalsHandle), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10espressomd_16global_variables_GlobalsHandle, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10espressomd_16global_variables_GlobalsHandle, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_10espressomd_16global_variables_GlobalsHandle, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10espressomd_16global_variables_13GlobalsHandle_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10espressomd_16global_variables_GlobalsHandle, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1 && defined(Py_TPFLAGS_HAVE_FINALIZE)
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    __Pyx_NAMESTR("global_variables"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 0},
  {&__pyx_kp_s_11, __pyx_k_11, sizeof(__pyx_k_11), 0, 0, 1, 0},
  {&__pyx_kp_s_13, __pyx_k_13, sizeof(__pyx_k_13), 0, 0, 1, 0},
  {&__pyx_kp_s_14, __pyx_k_14, sizeof(__pyx_k_14), 0, 0, 1, 0},
  {&__pyx_kp_s_16, __pyx_k_16, sizeof(__pyx_k_16), 0, 0, 1, 0},
  {&__pyx_kp_s_18, __pyx_k_18, sizeof(__pyx_k_18), 0, 0, 1, 0},
  {&__pyx_kp_s_21, __pyx_k_21, sizeof(__pyx_k_21), 0, 0, 1, 0},
  {&__pyx_kp_s_23, __pyx_k_23, sizeof(__pyx_k_23), 0, 0, 1, 0},
  {&__pyx_kp_s_25, __pyx_k_25, sizeof(__pyx_k_25), 0, 0, 1, 0},
  {&__pyx_kp_s_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 0, 1, 0},
  {&__pyx_kp_s_5, __pyx_k_5, sizeof(__pyx_k_5), 0, 0, 1, 0},
  {&__pyx_kp_s_6, __pyx_k_6, sizeof(__pyx_k_6), 0, 0, 1, 0},
  {&__pyx_kp_s_7, __pyx_k_7, sizeof(__pyx_k_7), 0, 0, 1, 0},
  {&__pyx_kp_s_8, __pyx_k_8, sizeof(__pyx_k_8), 0, 0, 1, 0},
  {&__pyx_kp_s_9, __pyx_k_9, sizeof(__pyx_k_9), 0, 0, 1, 0},
  {&__pyx_n_s__ValueError, __pyx_k__ValueError, sizeof(__pyx_k__ValueError), 0, 0, 1, 1},
  {&__pyx_n_s____import__, __pyx_k____import__, sizeof(__pyx_k____import__), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s__adress_vars, __pyx_k__adress_vars, sizeof(__pyx_k__adress_vars), 0, 0, 1, 1},
  {&__pyx_n_s__array, __pyx_k__array, sizeof(__pyx_k__array), 0, 0, 1, 1},
  {&__pyx_n_s__np, __pyx_k__np, sizeof(__pyx_k__np), 0, 0, 1, 1},
  {&__pyx_n_s__numpy, __pyx_k__numpy, sizeof(__pyx_k__numpy), 0, 0, 1, 1},
  {&__pyx_n_s__range, __pyx_k__range, sizeof(__pyx_k__range), 0, 0, 1, 1},
  {&__pyx_n_s__zeros, __pyx_k__zeros, sizeof(__pyx_k__zeros), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s__ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s__range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "espressomd/global_variables.pyx":32
 *             global box_l
 *             if len(_box_l) != 3:
 *                 raise ValueError("Box length must be of length 3")             # <<<<<<<<<<<<<<
 *             for i in range(3):
 *                 if _box_l[i] <= 0:
 */
  __pyx_k_tuple_2 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_1)); if (unlikely(!__pyx_k_tuple_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_2);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_2));

  /* "espressomd/global_variables.pyx":35
 *             for i in range(3):
 *                 if _box_l[i] <= 0:
 *                     raise ValueError("Box length must be > 0 in all directions")             # <<<<<<<<<<<<<<
 *                 box_l[i]=_box_l[i]
 * 
 */
  __pyx_k_tuple_4 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_3)); if (unlikely(!__pyx_k_tuple_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_4);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_4));

  /* "espressomd/global_variables.pyx":134
 *             global node_grid
 *             if len(_node_grid) != 3:
 *                 raise ValueError("node_grid must be of length 3")             # <<<<<<<<<<<<<<
 *             for i in range(3):
 *                 if _node_grid[i] <= 0:
 */
  __pyx_k_tuple_10 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_9)); if (unlikely(!__pyx_k_tuple_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_10);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_10));

  /* "espressomd/global_variables.pyx":137
 *             for i in range(3):
 *                 if _node_grid[i] <= 0:
 *                     raise ValueError("node_grid must be > 0 in all directions")             # <<<<<<<<<<<<<<
 *                 node_grid[i]=_node_grid[i]
 *             if _node_grid[0]*_node_grid[1]*_node_grid[2] != n_nodes:
 */
  __pyx_k_tuple_12 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_11)); if (unlikely(!__pyx_k_tuple_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_12);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_12));

  /* "espressomd/global_variables.pyx":171
 *             global npt_piston
 *             if _npt_piston < 0:
 *                 raise ValueError("npt_piston must be > 0")             # <<<<<<<<<<<<<<
 *             nptiso.piston=_npt_piston
 *             mpi_bcast_parameter(FIELD_NPTISO_PISTON)
 */
  __pyx_k_tuple_15 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_14)); if (unlikely(!__pyx_k_tuple_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_15);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_15));

  /* "espressomd/global_variables.pyx":192
 *             if len(_periodic) != 3:
 *                 raise ValueError("periodicity must be of length 3, got length "+str(len(_periodic)))
 *             periodicity=np.zeros(3);             # <<<<<<<<<<<<<<
 *             for i in range(3):
 *                 if _periodic[i] != 1:
 */
  __pyx_k_tuple_17 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_k_tuple_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_17);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_17));

  /* "espressomd/global_variables.pyx":195
 *             for i in range(3):
 *                 if _periodic[i] != 1:
 *                     raise ValueError("Until we can handle conditional compilation, only periodicity [1,1,1] is supported in python interface")             # <<<<<<<<<<<<<<
 *             for i in range(3):
 *                 periodicity[i]=_periodic[i];
 */
  __pyx_k_tuple_19 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_18)); if (unlikely(!__pyx_k_tuple_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_19);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_19));

  /* "espressomd/global_variables.pyx":204
 *         def __get__(self):
 *             global periodic
 *             periodicity=np.zeros(3);             # <<<<<<<<<<<<<<
 *             periodicity[0]=periodic%2;
 *             periodicity[1]=int(periodic/2)%2;
 */
  __pyx_k_tuple_20 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_k_tuple_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_20);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_20));

  /* "espressomd/global_variables.pyx":213
 *         def __set__(self, double _skin):
 *             if _skin <= 0:
 *                 raise ValueError("Skin must be >= 0")             # <<<<<<<<<<<<<<
 *             global skin
 *             skin=_skin
 */
  __pyx_k_tuple_22 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_21)); if (unlikely(!__pyx_k_tuple_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_22);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_22));

  /* "espressomd/global_variables.pyx":234
 *         def __set__(self, double _time):
 *             if _time <= 0:
 *                 raise ValueError("Simulation time must be >= 0")             # <<<<<<<<<<<<<<
 *             global sim_time
 *             sim_time=_time
 */
  __pyx_k_tuple_24 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_23)); if (unlikely(!__pyx_k_tuple_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_24);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_24));

  /* "espressomd/global_variables.pyx":249
 *                 global lbpar_gpu
 *             if _time_step <= 0:
 *               raise ValueError("Time Step must be positive")             # <<<<<<<<<<<<<<
 *             IF LB:
 *                 if lbpar.tau >= 0.0 and _time_step > lbpar.tau:
 */
  __pyx_k_tuple_26 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_25)); if (unlikely(!__pyx_k_tuple_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_26);
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_26));
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initglobal_variables(void); /*proto*/
PyMODINIT_FUNC initglobal_variables(void)
#else
PyMODINIT_FUNC PyInit_global_variables(void); /*proto*/
PyMODINIT_FUNC PyInit_global_variables(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_global_variables(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("global_variables"), __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "espressomd.global_variables")) {
      if (unlikely(PyDict_SetItemString(modules, "espressomd.global_variables", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME)); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_espressomd__global_variables) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_10espressomd_16global_variables_GlobalsHandle) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "GlobalsHandle", (PyObject *)&__pyx_type_10espressomd_16global_variables_GlobalsHandle) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_10espressomd_16global_variables_GlobalsHandle = &__pyx_type_10espressomd_16global_variables_GlobalsHandle;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "espressomd/global_variables.pyx":22
 * 
 * cimport global_variables
 * import numpy as np             # <<<<<<<<<<<<<<
 * 
 * cdef class GlobalsHandle:
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__numpy), 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s__np, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/global_variables.pyx":1
 * #             # <<<<<<<<<<<<<<
 * # Copyright (C) 2013,2014 The ESPResSo project
 * #
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyDict_SetItem(__pyx_d, __pyx_n_s____test__, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    __Pyx_AddTraceback("init espressomd.global_variables", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init espressomd.global_variables");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%s() takes %s %" CYTHON_FORMAT_SSIZE_T "d positional argument%s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CPYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    #if PY_VERSION_HEX < 0x02050000
    if (PyClass_Check(type)) {
    #else
    if (PyType_Check(type)) {
    #endif
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        #if PY_VERSION_HEX < 0x02050000
        if (PyInstance_Check(type)) {
            type = (PyObject*) ((PyInstanceObject*)type)->in_class;
            Py_INCREF(type);
        } else {
            type = 0;
            PyErr_SetString(PyExc_TypeError,
                "raise: exception must be an old-style class or instance");
            goto raise_error;
        }
        #else
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
        #endif
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else /* Python 3+ */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *args;
        if (!value)
            args = PyTuple_New(0);
        else if (PyTuple_Check(value)) {
            Py_INCREF(value);
            args = value;
        } else
            args = PyTuple_Pack(1, value);
        if (!args)
            goto bad;
        owned_instance = PyEval_CallObject(type, args);
        Py_DECREF(args);
        if (!owned_instance)
            goto bad;
        value = owned_instance;
        if (!PyExceptionInstance_Check(value)) {
            PyErr_Format(PyExc_TypeError,
                         "calling %R should have returned an instance of "
                         "BaseException, not %R",
                         type, Py_TYPE(value));
            goto bad;
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return NULL;
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (result) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely((n >= 0) & (n < PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return -1;
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o))) {
#else
    if (is_list || PySequence_Check(o)) {
#endif
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

static CYTHON_INLINE long __Pyx_mod_long(long a, long b) {
    long r = a % b;
    r += ((r != 0) & ((r ^ b) < 0)) * b;
    return r;
}

static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
    long q = a / b;
    long r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s____import__);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    #if PY_VERSION_HEX >= 0x02050000
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0; /* try absolute import on failure */
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
    #else
    if (level>0) {
        PyErr_SetString(PyExc_RuntimeError, "Relative import is not supported for Python <=2.4.");
        goto bad;
    }
    module = PyObject_CallFunctionObjArgs(py_import,
        name, global_dict, empty_dict, list, NULL);
    #endif
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(unsigned long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (unsigned long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return (unsigned long)PyLong_AsUnsignedLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(unsigned long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(unsigned long) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(unsigned long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (unsigned long)PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(unsigned PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (unsigned PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return (unsigned PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(unsigned PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(unsigned PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(unsigned PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (unsigned PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return (long)PyLong_AsUnsignedLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(long) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (long)PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return (PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(signed long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (signed long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return (signed long)PyLong_AsUnsignedLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(signed long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(signed long) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(signed long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (signed long)PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#endif
#endif
static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(signed PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (signed PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return (signed PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
#if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(signed PY_LONG_LONG)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(signed PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(signed PY_LONG_LONG) ((PyLongObject*)x)->ob_digit[0];
                }
            }
#endif
#endif
            return (signed PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,            /*int argcount,*/
        0,            /*int kwonlyargcount,*/
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,      /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_globals = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif /*__PYX_DEFAULT_STRING_ENCODING_IS_ASCII*/
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else /* PY_VERSION_HEX < 0x03030000 */
        if (PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_DATA_SIZE(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
        return PyUnicode_AsUTF8AndSize(o, length);
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
#endif /* PY_VERSION_HEX < 0x03030000 */
    } else
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII  || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT */
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (r < 0) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       if ((val != (unsigned PY_LONG_LONG)-1) || !PyErr_Occurred())
           PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
